// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: unit.sql

package db

import (
	"context"
)

const createUnit = `-- name: CreateUnit :one
INSERT INTO units (
  unit_name,
  unit_value
) VALUES (
  $1, $2
) RETURNING id, unit_name, unit_value
`

type CreateUnitParams struct {
	UnitName  string `json:"unit_name"`
	UnitValue int64  `json:"unit_value"`
}

func (q *Queries) CreateUnit(ctx context.Context, arg CreateUnitParams) (Unit, error) {
	row := q.db.QueryRowContext(ctx, createUnit, arg.UnitName, arg.UnitValue)
	var i Unit
	err := row.Scan(&i.ID, &i.UnitName, &i.UnitValue)
	return i, err
}

const deleteUnit = `-- name: DeleteUnit :exec
DELETE FROM units
WHERE id = $1
`

func (q *Queries) DeleteUnit(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUnit, id)
	return err
}

const listUnits = `-- name: ListUnits :many
SELECT id, unit_name, unit_value FROM units
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListUnitsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUnits(ctx context.Context, arg ListUnitsParams) ([]Unit, error) {
	rows, err := q.db.QueryContext(ctx, listUnits, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Unit{}
	for rows.Next() {
		var i Unit
		if err := rows.Scan(&i.ID, &i.UnitName, &i.UnitValue); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUnit = `-- name: UpdateUnit :one
UPDATE units
  set unit_name = $2,
      unit_value = $3
WHERE id = $1
RETURNING id, unit_name, unit_value
`

type UpdateUnitParams struct {
	ID        int64  `json:"id"`
	UnitName  string `json:"unit_name"`
	UnitValue int64  `json:"unit_value"`
}

func (q *Queries) UpdateUnit(ctx context.Context, arg UpdateUnitParams) (Unit, error) {
	row := q.db.QueryRowContext(ctx, updateUnit, arg.ID, arg.UnitName, arg.UnitValue)
	var i Unit
	err := row.Scan(&i.ID, &i.UnitName, &i.UnitValue)
	return i, err
}
