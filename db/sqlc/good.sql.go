// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: good.sql

package db

import (
	"context"
)

const createGood = `-- name: CreateGood :one
INSERT INTO goods (
  category,
  model,
  unit,
  amount,
  good_desc
) VALUES (
  $1, $2, $3, $4, $5
) RETURNING id, category, model, unit, amount, good_desc, created_at
`

type CreateGoodParams struct {
	Category int64  `json:"category"`
	Model    string `json:"model"`
	Unit     int64  `json:"unit"`
	Amount   int64  `json:"amount"`
	GoodDesc string `json:"good_desc"`
}

func (q *Queries) CreateGood(ctx context.Context, arg CreateGoodParams) (Good, error) {
	row := q.db.QueryRowContext(ctx, createGood,
		arg.Category,
		arg.Model,
		arg.Unit,
		arg.Amount,
		arg.GoodDesc,
	)
	var i Good
	err := row.Scan(
		&i.ID,
		&i.Category,
		&i.Model,
		&i.Unit,
		&i.Amount,
		&i.GoodDesc,
		&i.CreatedAt,
	)
	return i, err
}

const deleteGood = `-- name: DeleteGood :exec
DELETE FROM goods
WHERE id = $1
`

func (q *Queries) DeleteGood(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteGood, id)
	return err
}

const getGood = `-- name: GetGood :one
SELECT id, category, model, unit, amount, good_desc, created_at FROM goods
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetGood(ctx context.Context, id int64) (Good, error) {
	row := q.db.QueryRowContext(ctx, getGood, id)
	var i Good
	err := row.Scan(
		&i.ID,
		&i.Category,
		&i.Model,
		&i.Unit,
		&i.Amount,
		&i.GoodDesc,
		&i.CreatedAt,
	)
	return i, err
}

const listGoods = `-- name: ListGoods :many
SELECT id, category, model, unit, amount, good_desc, created_at FROM goods
WHERE 
    category = $1 OR
    model = $2
ORDER BY id
LIMIT $3
OFFSET $4
`

type ListGoodsParams struct {
	Category int64  `json:"category"`
	Model    string `json:"model"`
	Limit    int32  `json:"limit"`
	Offset   int32  `json:"offset"`
}

func (q *Queries) ListGoods(ctx context.Context, arg ListGoodsParams) ([]Good, error) {
	rows, err := q.db.QueryContext(ctx, listGoods,
		arg.Category,
		arg.Model,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Good{}
	for rows.Next() {
		var i Good
		if err := rows.Scan(
			&i.ID,
			&i.Category,
			&i.Model,
			&i.Unit,
			&i.Amount,
			&i.GoodDesc,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateGood = `-- name: UpdateGood :one
UPDATE goods
  set unit = $2,
      amount = $3
WHERE id = $1
RETURNING id, category, model, unit, amount, good_desc, created_at
`

type UpdateGoodParams struct {
	ID     int64 `json:"id"`
	Unit   int64 `json:"unit"`
	Amount int64 `json:"amount"`
}

func (q *Queries) UpdateGood(ctx context.Context, arg UpdateGoodParams) (Good, error) {
	row := q.db.QueryRowContext(ctx, updateGood, arg.ID, arg.Unit, arg.Amount)
	var i Good
	err := row.Scan(
		&i.ID,
		&i.Category,
		&i.Model,
		&i.Unit,
		&i.Amount,
		&i.GoodDesc,
		&i.CreatedAt,
	)
	return i, err
}
