// Code generated by MockGen. DO NOT EDIT.
// Source: inventory_management/db/sqlc (interfaces: Store)

// Package mock_sqlc is a generated GoMock package.
package mock_sqlc

import (
	context "context"
	db "inventory_management/db/sqlc"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateCategory mocks base method.
func (m *MockStore) CreateCategory(arg0 context.Context, arg1 db.CreateCategoryParams) (db.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCategory", arg0, arg1)
	ret0, _ := ret[0].(db.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCategory indicates an expected call of CreateCategory.
func (mr *MockStoreMockRecorder) CreateCategory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCategory", reflect.TypeOf((*MockStore)(nil).CreateCategory), arg0, arg1)
}

// CreateGood mocks base method.
func (m *MockStore) CreateGood(arg0 context.Context, arg1 db.CreateGoodParams) (db.Good, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGood", arg0, arg1)
	ret0, _ := ret[0].(db.Good)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGood indicates an expected call of CreateGood.
func (mr *MockStoreMockRecorder) CreateGood(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGood", reflect.TypeOf((*MockStore)(nil).CreateGood), arg0, arg1)
}

// CreateUnit mocks base method.
func (m *MockStore) CreateUnit(arg0 context.Context, arg1 db.CreateUnitParams) (db.Unit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUnit", arg0, arg1)
	ret0, _ := ret[0].(db.Unit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUnit indicates an expected call of CreateUnit.
func (mr *MockStoreMockRecorder) CreateUnit(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUnit", reflect.TypeOf((*MockStore)(nil).CreateUnit), arg0, arg1)
}

// DeleteCategory mocks base method.
func (m *MockStore) DeleteCategory(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCategory", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCategory indicates an expected call of DeleteCategory.
func (mr *MockStoreMockRecorder) DeleteCategory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCategory", reflect.TypeOf((*MockStore)(nil).DeleteCategory), arg0, arg1)
}

// DeleteGood mocks base method.
func (m *MockStore) DeleteGood(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGood", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGood indicates an expected call of DeleteGood.
func (mr *MockStoreMockRecorder) DeleteGood(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGood", reflect.TypeOf((*MockStore)(nil).DeleteGood), arg0, arg1)
}

// DeleteUnit mocks base method.
func (m *MockStore) DeleteUnit(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUnit", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUnit indicates an expected call of DeleteUnit.
func (mr *MockStoreMockRecorder) DeleteUnit(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUnit", reflect.TypeOf((*MockStore)(nil).DeleteUnit), arg0, arg1)
}

// GetCategory mocks base method.
func (m *MockStore) GetCategory(arg0 context.Context, arg1 int64) (db.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategory", arg0, arg1)
	ret0, _ := ret[0].(db.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategory indicates an expected call of GetCategory.
func (mr *MockStoreMockRecorder) GetCategory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategory", reflect.TypeOf((*MockStore)(nil).GetCategory), arg0, arg1)
}

// GetGood mocks base method.
func (m *MockStore) GetGood(arg0 context.Context, arg1 int64) (db.Good, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGood", arg0, arg1)
	ret0, _ := ret[0].(db.Good)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGood indicates an expected call of GetGood.
func (mr *MockStoreMockRecorder) GetGood(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGood", reflect.TypeOf((*MockStore)(nil).GetGood), arg0, arg1)
}

// ListCategories mocks base method.
func (m *MockStore) ListCategories(arg0 context.Context, arg1 db.ListCategoriesParams) ([]db.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCategories", arg0, arg1)
	ret0, _ := ret[0].([]db.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCategories indicates an expected call of ListCategories.
func (mr *MockStoreMockRecorder) ListCategories(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCategories", reflect.TypeOf((*MockStore)(nil).ListCategories), arg0, arg1)
}

// ListGoods mocks base method.
func (m *MockStore) ListGoods(arg0 context.Context, arg1 db.ListGoodsParams) ([]db.Good, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGoods", arg0, arg1)
	ret0, _ := ret[0].([]db.Good)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGoods indicates an expected call of ListGoods.
func (mr *MockStoreMockRecorder) ListGoods(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGoods", reflect.TypeOf((*MockStore)(nil).ListGoods), arg0, arg1)
}

// ListUnits mocks base method.
func (m *MockStore) ListUnits(arg0 context.Context, arg1 db.ListUnitsParams) ([]db.Unit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUnits", arg0, arg1)
	ret0, _ := ret[0].([]db.Unit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUnits indicates an expected call of ListUnits.
func (mr *MockStoreMockRecorder) ListUnits(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUnits", reflect.TypeOf((*MockStore)(nil).ListUnits), arg0, arg1)
}

// UpdateCategory mocks base method.
func (m *MockStore) UpdateCategory(arg0 context.Context, arg1 db.UpdateCategoryParams) (db.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCategory", arg0, arg1)
	ret0, _ := ret[0].(db.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCategory indicates an expected call of UpdateCategory.
func (mr *MockStoreMockRecorder) UpdateCategory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCategory", reflect.TypeOf((*MockStore)(nil).UpdateCategory), arg0, arg1)
}

// UpdateGood mocks base method.
func (m *MockStore) UpdateGood(arg0 context.Context, arg1 db.UpdateGoodParams) (db.Good, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGood", arg0, arg1)
	ret0, _ := ret[0].(db.Good)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateGood indicates an expected call of UpdateGood.
func (mr *MockStoreMockRecorder) UpdateGood(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGood", reflect.TypeOf((*MockStore)(nil).UpdateGood), arg0, arg1)
}

// UpdateUnit mocks base method.
func (m *MockStore) UpdateUnit(arg0 context.Context, arg1 db.UpdateUnitParams) (db.Unit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUnit", arg0, arg1)
	ret0, _ := ret[0].(db.Unit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUnit indicates an expected call of UpdateUnit.
func (mr *MockStoreMockRecorder) UpdateUnit(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUnit", reflect.TypeOf((*MockStore)(nil).UpdateUnit), arg0, arg1)
}
